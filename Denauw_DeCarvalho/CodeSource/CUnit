#include <CUnit.h>
#include <code.c>
#include <stdio.h>

/* TEST ALIGN */
void test_align(void)
{
	CU_ASSERT_EQUAL(align(150),152);
	CU_ASSERT_EQUAL(align(1),4);
	CU_ASSERT_EQUAL(align(9),12);
	CU_ASSERT_EQUAL(align(4),4);
	CU_ASSERT_EQUAL(align(15),16);
}


/* TEST MY_MALLOC */
void test_my_malloc(void)
{
	void* allouer=my_malloc(10);

}


/* TEST MY_CALLOC */
void test_my_calloc(void)
{
	void* allouer=my_calloc(8);
    CU_ASSERT_EQUAL(allouer+20,0);	//Verif si les autres valeurs non-allouées sont mises à zero
    CU_ASSERT_EQUAL(allouer+100,0);
    CU_ASSERT_EQUAL(allouer+10,0);
    CU_ASSERT_NOT_EQUAL(allouer,0);	//Verif si la valeur allouée est != 0
}


/* TEST MY_FREE */
void test_my_free(void)
{
	int *i
	i=(int*)malloc(sizeof(int));

	my_free(i);
	CU_ASSERT_PTR_NOT_NULL(i);
}


/* TESTS DE PERFORMANCES */

//my_malloc face au true_malloc
int temps_my_malloc()
{
	int a = gettimeofday();
	my_malloc(100);
	int b = gettimeofday();
	printf("Temps pour my_malloc:\n");
	return (b - a);
}

int temps_true_malloc()
{
	int a = gettimeofday();
	malloc(100);
	int b = gettimeofday();
	printf("Temps pour true_malloc:\n");
	return (b - a);
}

//my_calloc face au true_calloc
int temps_my_calloc()
{
	int a = gettimeofday();
	my_calloc(100);
	int b = gettimeofday();
	printf("Temps pour my_calloc:\n");
	return (b - a);
}

int temps_true_calloc()
{
	int a = gettimeofday();
	calloc(100);
	int b = gettimeofday();
	printf("Temps pour true_calloc:\n");
	return (b - a);
}

//my_free face au true_free
int temps_my_free()
{
	int *i
	i=(int*)malloc(sizeof(int));

	int a = gettimeofday();
	my_free(i);
	int b = gettimeofday();
	printf("Temps pour my_free:\n");
	return (b - a);
}

int temps_true_free()
{
	int *i
	i=(int*)malloc(sizeof(int));

	int a = gettimeofday();
	free(i);
	int b = gettimeofday();
	printf("Temps pour true_free:\n");
	return (b - a);
}


if (CUE_SUCCESS != CU_initialize_registry())
{
	return CU_get_error();
}